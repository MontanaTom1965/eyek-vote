name: Deploy to SiteGround (All)

on:
  workflow_dispatch:        # lets you run it manually
  push:
    branches: [ "main" ]    # auto-deploy when you push to main (optional)

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SG_HOST: ${{ secrets.SG_HOST }}
      SG_PORT: ${{ secrets.SG_PORT }}
      SG_USER: ${{ secrets.SG_USER }}
      SG_BASE_PATH: ${{ secrets.SG_BASE_PATH }}
      DEPLOY_KEY_B64: ${{ secrets.SG_DEPLOY_KEY_B64 }}

      # local → remote mapping (comma-separated list of "local:remote-subdir")
      MAP: >
        vote:vote,
        screen:screen,
        host:host,
        board:board,
        assets:assets,
        reports:reports

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Prepare SSH key
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          # known_hosts so ssh/rsync won't ask to trust
          ssh-keyscan -p "${SG_PORT}" "${SG_HOST}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Sanity check SSH connects
        shell: bash
        run: |
          set -euo pipefail
          ssh -p "${SG_PORT}" -o StrictHostKeyChecking=yes "${SG_USER}@${SG_HOST}" "echo 'SSH OK on $(hostname)'"

      - name: Ensure remote base and subfolders exist
        shell: bash
        run: |
          set -euo pipefail
          # Make sure base path exists
          ssh -p "${SG_PORT}" "${SG_USER}@${SG_HOST}" "mkdir -p '${SG_BASE_PATH}'"
          # Create each subfolder (vote, screen, host, board, assets, reports)
          IFS=',' read -ra ITEMS <<< "${MAP}"
          for item in "${ITEMS[@]}"; do
            local="${item%%:*}"
            remote="${item##*:}"
            ssh -p "${SG_PORT}" "${SG_USER}@${SG_HOST}" "mkdir -p '${SG_BASE_PATH}/${remote}'"
          done

      - name: Deploy folders (only if they exist locally)
        shell: bash
        run: |
          set -euo pipefail
          IFS=',' read -ra ITEMS <<< "${MAP}"
          for item in "${ITEMS[@]}"; do
            local="${item%%:*}"
            remote="${item##*:}"

            if [ -d "${local}" ]; then
              echo "→ Syncing ./${local}/ to ${SG_BASE_PATH}/${remote}/"
              rsync -avz --delete \
                -e "ssh -p ${SG_PORT} -o StrictHostKeyChecking=yes" \
                "./${local}/" "${SG_USER}@${SG_HOST}:${SG_BASE_PATH}/${remote}/"
            else
              echo "⏭  Skipping ./${local}/ (not found locally)"
            fi
          done

      - name: List remote result (for quick confirmation)
        shell: bash
        run: |
          set -euo pipefail
          ssh -p "${SG_PORT}" "${SG_USER}@${SG_HOST}" "ls -la '${SG_BASE_PATH}'; echo; for d in vote screen host board assets reports; do echo '---' \$d; ls -la '${SG_BASE_PATH}'/\$d || true; done"
