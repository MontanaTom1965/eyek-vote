name: Deploy to SiteGround (folders)

on:
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SG_HOST: ${{ secrets.SG_HOST }}                  # gcam1050.siteground.biz
      SG_PORT: ${{ secrets.SG_PORT }}                  # 18765
      SG_USER: ${{ secrets.SG_USER }}                  # u2212-6q1dxbl4nmbd
      SG_BASE_PATH: ${{ secrets.SG_BASE_PATH }}        # /home/u2212-6q1dxbl4nmbd/www/vote.earnyourencorekaraoke.com/public_html

    steps:
      - name: Checkout full repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sanity – show what we checked out
        run: |
          set -euxo pipefail
          pwd
          git rev-parse --short HEAD
          echo "Top-level:"
          ls -la
          echo
          echo "Find index.html files (maxdepth 2):"
          find . -maxdepth 2 -type f -name index.html -print

      - name: Prepare SSH key & known_hosts (base64-safe)
        shell: bash
        env:
          SG_DEPLOY_KEY_B64: ${{ secrets.SG_DEPLOY_KEY_B64 }}   # base64 of your *private* key
          SG_HOSTKEY: ${{ secrets.SG_HOSTKEY }}                 # siteground host key line: [gcam1050.siteground.biz]:18765 ssh-ed25519 AAAA...
        run: |
          set -euxo pipefail

          # Fail fast if any required secret is missing
          for v in SG_HOST SG_PORT SG_USER SG_BASE_PATH SG_DEPLOY_KEY_B64 SG_HOSTKEY; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Missing required secret/env: $v"
              exit 1
            fi
          done

          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          echo "$SG_HOSTKEY" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

          echo "$SG_DEPLOY_KEY_B64" | base64 -d > ~/.ssh/sg_deploy
          chmod 600 ~/.ssh/sg_deploy

      - name: Deploy folders
        shell: bash
        run: |
          set -euxo pipefail

          SSH_CMD="ssh -p $SG_PORT -i ~/.ssh/sg_deploy -o StrictHostKeyChecking=yes"

          # Ensure all target dirs exist on the server *before* rsync
          $SSH_CMD "$SG_USER@$SG_HOST" "set -e; test -n \"$SG_BASE_PATH\"; mkdir -p \"$SG_BASE_PATH\"/{vote,screen,host,board,admin,assets,reports}"

          rsync_push () {
            local SRC="$1" DST_SUB="$2"
            if [ -d "$SRC" ]; then
              rsync -avz --delete \
                -e "$SSH_CMD" \
                "$SRC"/ "$SG_USER@$SG_HOST:$SG_BASE_PATH/$DST_SUB/"
            else
              echo "⏭  Skipping $SRC (not found in repo)"
            fi
          }

          rsync_push "./vote"    "vote"
          rsync_push "./screen"  "screen"
          rsync_push "./host"    "host"
          rsync_push "./board"   "board"
          rsync_push "./admin"   "admin"
          rsync_push "./assets"  "assets"
          rsync_push "./reports" "reports"

      - name: Post-check on remote (list index pages)
        shell: bash
        run: |
          set -euxo pipefail
          SSH_CMD="ssh -p $SG_PORT -i ~/.ssh/sg_deploy -o StrictHostKeyChecking=yes"
          $SSH_CMD "$SG_USER@$SG_HOST" "set -e; find \"$SG_BASE_PATH\" -maxdepth 2 -type f -name index.html -printf '%p -> %TY-%Tm-%Td %TH:%TM\n'"
